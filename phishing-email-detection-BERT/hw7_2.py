# -*- coding: utf-8 -*-
"""HW7_2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zg6JgGnWwl8ESu9W55A_PMu2wFZ85iy6

Kaggle دریافت دیتاست از
"""

from google.colab import files
files.upload()  # آپلود فایل kaggle.json

"""انتقال فایل و تنظیم مجوز ها"""

!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json

"""kaggle نصب و استفاده از ابزار"""

!pip install kaggle
!kaggle datasets download -d naserabdullahalam/phishing-email-dataset
!unzip phishing-email-dataset.zip

"""---

نصب کتابخانه های مورد نیاز
"""

!pip install transformers
!pip install datasets
!pip install scikit-learn
!pip install pandas
!pip install matplotlib seaborn

"""---

بارگذاری و بررسی داده هاه
"""

import pandas as pd

df = pd.read_csv('phishing_email.csv')

# نمایش چند سطر ابتدایی
df.head()

"""بررسی ستون ها و توزیع برچسب ها"""

# نمایش اطلاعات دیتافریم
df.info()

# بررسی توزیع برچسب‌ها
df['label'].value_counts()

"""---

پیش پردازش داده ها
"""

import pandas as pd

df = pd.read_csv('CEAS_08.csv')
texts = df['body']
labels = df['label']  # یا هر ستون مرتبط با برچسب‌ها

from sklearn.model_selection import train_test_split
train_texts, val_texts, train_labels, val_labels = train_test_split(texts, labels, test_size=0.2, shuffle=True, random_state=42)

train_labels = train_labels.tolist()
val_labels = val_labels.tolist()
train_texts = train_texts.tolist()
val_texts = val_texts.tolist()

"""---

توکنایز کردن متن‌ها با BERT
"""

from transformers import BertTokenizer

tokenizer = BertTokenizer.from_pretrained('bert-base-uncased')
encodings = tokenizer(train_texts, truncation=True, padding=True, max_length=128)

"""---

ساخت دیتاست سفارشی PyTorch
"""

import torch

class TextDataset(torch.utils.data.Dataset):
    def __init__(self, encodings, labels):
        self.encodings = encodings
        self.labels = labels

    def __len__(self):
        return len(self.labels)

    def __getitem__(self, idx):
        item = {key: torch.tensor(val[idx]) for key, val in self.encodings.items()}
        item['labels'] = torch.tensor(self.labels[idx])
        return item

"""---

BERT آماده سازی مدل
"""

from torch.utils.data import DataLoader
from sklearn.preprocessing import LabelEncoder

label_encoder = LabelEncoder()
train_labels = label_encoder.fit_transform(train_labels)
val_labels = label_encoder.transform(val_labels)

train_dataset = TextDataset(encodings, train_labels)
dataloader = DataLoader(train_dataset, batch_size=4, shuffle=True)

#from transformers import BertForSequenceClassification, AdamW
from torch.optim import AdamW

num_labels = len(label_encoder.classes_)
model = BertForSequenceClassification.from_pretrained('bert-base-uncased', num_labels=num_labels)
optimizer = AdamW(model.parameters(), lr=5e-5)

device = torch.device('cuda') if torch.cuda.is_available() else torch.device('cpu')
model.to(device)

"""---

آموزش مدل
"""

from transformers import get_linear_schedule_with_warmup
from tqdm import tqdm

epochs = 5
total_steps = len(dataloader) * epochs
scheduler = get_linear_schedule_with_warmup(optimizer, num_warmup_steps=0, num_training_steps=total_steps)

for epoch in range(epochs):
    model.train()
    for batch in tqdm(dataloader):
        optimizer.zero_grad()

        input_ids = batch['input_ids'].to(device)
        attention_mask = batch['attention_mask'].to(device)
        labels = batch['labels'].to(device)

        outputs = model(input_ids, attention_mask=attention_mask, labels=labels)
        loss = outputs.loss
        loss.backward()

        optimizer.step()
        scheduler.step()
    print(f'Epoch {epoch + 1}/{epochs} completed.')

"""---

ارزیابی مدل
"""

from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score

val_encodings = tokenizer(val_texts, truncation=True, padding=True, max_length=128)
val_dataset = TextDataset(val_encodings, val_labels)
val_loader = DataLoader(val_dataset, batch_size=16, shuffle=False)

predictions = []
true_labels = []

with torch.no_grad():
    for batch in val_loader:
        input_ids = batch['input_ids'].to(device)
        attention_mask = batch['attention_mask'].to(device)
        labels = batch['labels'].to(device)

        outputs = model(input_ids, attention_mask=attention_mask)
        logits = outputs.logits
        preds = torch.argmax(logits, dim=1).cpu().numpy()
        labels = labels.cpu().numpy()

        predictions.extend(preds)
        true_labels.extend(labels)

predicted_labels = label_encoder.inverse_transform(predictions)
true_labels_str = label_encoder.inverse_transform(true_labels)

accuracy = accuracy_score(true_labels_str, predicted_labels)
precision = precision_score(true_labels_str, predicted_labels, average='weighted')
recall = recall_score(true_labels_str, predicted_labels, average='weighted')
f1 = f1_score(true_labels_str, predicted_labels, average='weighted')

print(f'Validation Accuracy: {accuracy}')
print(f'Validation Precision: {precision}')
print(f'Validation Recall: {recall}')
print(f'Validation F1 Score: {f1}')

"""---

تابع پیش بینی برای متن جدید
"""

def predict_text(text):
    encoding = tokenizer(text, truncation=True, padding=True, max_length=128, return_tensors='pt')

    input_ids = encoding['input_ids'].to(device)
    attention_mask = encoding['attention_mask'].to(device)
    with torch.no_grad():
        outputs = model(input_ids, attention_mask=attention_mask)
        logits = outputs.logits
        predicted_class_id = torch.argmax(logits, dim=1).cpu().numpy()[0]

    predicted_label = label_encoder.inverse_transform([predicted_class_id])[0]
    return predicted_label

"""---

تست پیش بیینی روی چند ایمیل دلخواه
"""

test_emails = [
    "We've noticed unusual activity in your account. Please verify your identity immediately.",
    "Lunch is scheduled for 1 PM today in the cafeteria. Don’t be late!"
]
for email in test_emails:
    print(f"📨 Email: {email}")
    print(f"🔍 Prediction: {predict_text(email)}\n")
